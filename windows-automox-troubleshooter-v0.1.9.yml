- name: Automox Troubleshooter
- hosts: all
  ansible.windows.win_powershell:
    script: |
      param (
[Parameter(Mandatory=$False)][String]$AutoCheck  
)
Function Test-PortConnection {
[cmdletbinding()]
param(
[parameter(mandatory=$true)] [string]$TargetHost,
[parameter(mandatory=$true)] [int32] $TargetPort,
[int32] $Timeout = 10000)
if(test-Connection -ComputerName $TargetHost -count 1) {
$TargetHostStatus = "ONLINE"
} else {$TargetHostStatus = "OFFLINE"}
$Socket=New-Object System.Net.Sockets.TCPClient 
$Connection = $Socket.BeginConnect($Targethost,$TargetPort,$null,$null) 
$Connection.AsyncWaitHandle.WaitOne($timeout,$false) | Out-Null 
if($Socket.Connected -eq $true) { 
    $ConnectionStatus = "Success"
 } else {
 $ConnectionStatus = "Failed"
 }
 $Socket.Close | Out-Null
 $data1 = @{'TargetHostName'=$TargetHost;'TargetHostStatus'=$TargetHostStatus;'PortNumber'=$targetport;'ConnectionStatus'=$ConnectionStatus}
 return $data1
 }   
 
Function CatchError () {
    $Global:ErrorMessage = $_.Exception.Message
    If ($Global:ErrorMessage) {
        Write-Output "[ERROR:] Output: ----> $Global:ErrorMessage"
    }
}
 
Function EndofScript {
    Write-Output "[INFO:] ***********************************************************"
    Write-Output "[INFO:] End of Script"
}
 
$array_name = @()
$array_name = @{Error1 = "WSUS Error - Registry Entry Missing ----> Update missing WSUS registry entry";
                Error1a = "WSUS Error - Invalid ----> Update invalid WSUS registry entry";
                Error1b = "WSUS Error - Can ping, but cannot connect (Firewall?) ----> Open port $wsusport being blocked by firewall or network ACL";
                Error2a = "WSUS Error - WSUS UseWSUS not set ----> Enable UseWSUS - change value to 'ON'";
                Error2b = "WSUS Error - Registry Entry Missing ----> Update missing UseWSUS registry entry";
                Error3a = "Check or Start cryptsvc Service";
                Error3b = "Check or Start bits Service";
                Error3c = "Check or Start wuauserv Service";
                Error3d = "Check or Start amagent Service";
                Error3e = "Enable cryptsvc Service StartType to Automatic";
                Error3f = "Enable bits Service StartType to Automatic";
                Error3g = "Enable wuauserv Service StartType to Automatic";
                Error3h = "Enable amagnet Service StartType to Automatic";
                Error4a = "Check outboud port 443, possible local firewall blocking, or internet connection to Automox";
                }
 
$scriptver = $MyInvocation.MyCommand.Name
$scriptver = $scriptver.trim(".ps1")
$scriptver = $scriptver -replace ‘[-abcdefghijklmnopqrstuvwxyz]’
Write-Output "[INFO:] Script Version: $scriptver"
$hostname1 = hostname
Write-Output "[INFO:] Computer Hostname: $hostname1 "
$ErrorActionPreference = 'SilentlyContinue'
$ArrayOfErrors = @()
 
Try {$WSUS = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate' | Select-Object "WUServer" -ExpandProperty "WUServer"
    }
Catch {CatchError}
 
If (!$WSUS) {
    Write-Output "[ERROR:] WSUS Registry Entry NOT Found!"
    $ArrayOfErrors += 'Error1'
    }
 
If($WSUS)
    {
    $WSUS = [uri]"$WSUS"
    $WSUSHost = $WSUS.Host
    $WSUSPort = $WSUS.Port
    Write-Output "[SUCCESS:] WUServer Registry Entry Found w/ $WSUShost and $Wsusport"
 
    Write-Output "[INFO:] Testing WSUS Connection to $WSUSHost with $WSUSPort"
   
    Try {$Data = Test-PortConnection -TargetHost $WSUSHost -TargetPort $WSUSPort }
    Catch {CatchError}
    $targethost = $Data.TargetHostName
    $targetport = $Data.PortNumber
    $targetstatus = $Data.TargetHostStatus
        If ($targetstatus -ne 'ONLINE') {
            $ArrayOfErrors += 'Error1a'
        }
    $targetConnStatus = $Data.ConnectionStatus
        If ($targetConnstatus -ne 'Success') {
        $ArrayOfErrors += 'Error1b'
        }
    Write-Output "[INFO:] Target Host Name: $targethost"
    Write-Output "[INFO:] Target Port: $targetport"
    Write-Output "[INFO:] Target Host Status: $targetstatus"
    Write-Output "[INFO:] Connection Status: $targetConnStatus"
    }
 
Try {$UseWSUS = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU\' | Select-Object "UseWUServer" -ExpandProperty "UseWUServer" }
Catch {CatchError}
If($UseWSUS -eq 1) {
    Write-Output "[SUCCESS:] UseWUServer Registry set to ON"
    }
Elseif($UseWSUS -eq 0) {
    Write-Output "[WARNING:] UseWUServer Registry set to OFF"
    $ArrayOfErrors += 'Error2a'
    }
Else {
    Write-Output "[ERROR:] UseWUServer Registry Entry NOT Found!"
    $ArrayOfErrors += 'Error2b'
    }
 
If ($AutoCheck -eq "True") {
    $amtest = @("console.automox.com", "api.automox.com", $env:COMPUTERNAME)
    Foreach ($testhost in $amtest) {
        Try {$output = Test-PortConnection -TargetHost $testhost -TargetPort 443}
        Catch {CatchError}
        $output = $output.ConnectionStatus
        Switch ($output) {
            "Success" {Write-Output "[SUCCESS:] Connection to $testhost on 443"; break}
            "Failed"  {
                Write-output "[ERROR:] Connection to $testhost on 443"
                $ArrayOfErrors += 'Error4a'; break
                }
        }
    }
}
Else {
    Write-Output "[INFO:] Test Connection to Automox skipped."
    }
$services = @("cryptsvc", "bits", "wuauserv", "amagent")
Foreach ($service in $services) {
    try {$out = get-service -name $service | Select -ExpandProperty Status}
    catch {CatchError}
    $StartType = get-service -name $service | Select -ExpandProperty StartType
    If (!$out) {
        Write-Output "[ERROR:] $service Service NOT FOUND"
        Break
    }
    If ($out -like "*Running*") {
        Write-Output "[SUCCESS:] $service Service Status: $out"
    }
    Else {
        Write-Output "[WARNING:] $service Service Status: $out"
        If ($service -eq "cryptsvc") {
            $ArrayOfErrors += 'Error3a'
            }
        If ($service -eq "bits") {
            $ArrayOfErrors += 'Error3b'
            }
        If ($service -eq "wuauserv") {
            $ArrayOfErrors += 'Error3c'
            }
        If ($service -eq "amagent") {
            $ArrayOfErrors += 'Error3d'
            }
        }
    If ($StartType -like "*Disabled*") {
        Write-Output "[WARNING:] $service Service Status: $StartType"
        If ($service -eq "cryptsvc") {
            $ArrayOfErrors += 'Error3e'
            }
        If ($service -eq "bits") {
            $ArrayOfErrors += 'Error3f'
            }
        If ($service -eq "wuauserv") {
            $ArrayOfErrors += 'Error3g'
            }
        If ($service -eq "amagent") {
            $ArrayOfErrors += 'Error3h'
            }
    }
    
    Else {
        Write-Output "[SUCCESS:] $service Service Status: $StartType"
        }
}
Write-Output "[INFO:] ***********************************************************"
Write-Output "[INFO:] Get Patches installed within the last 90 Days"
$patches = Get-HotFix | ? { $_.InstalledOn -gt (get-date).AddDays(-90) } | Select HotFixID, InstalledBy, InstalledOn | Sort-Object InstalledOn -Descending
foreach ($patch in $patches) {
    $HotfixID = $patch | Select -ExpandProperty HotfixID
    $InstalledBy = $patch | Select -ExpandProperty installedBy
    $InstalledOn = $patch | Select -ExpandProperty InstalledOn
    write-output "[INFO Patch:] HotfixID=$HotfixID, Installedby=$InstalledBy, InstalledOn=$InstalledOn"
}
Write-Output "[INFO:] Get Patches Complete"
Write-Output "[INFO:] ***********************************************************"
Write-Output "[INFO:] Testing Complete"
 
If ($ArrayOfErrors) {
    Foreach ($entry in $arrayOfErrors) {
        $CorrectiveAction = $array_name.$($entry)
        Write-output "[CORRECTIVE ACTION:] $CorrectiveAction"
    }
}
Else {
    Write-Output "[INFO:] No Errors Found"
    }
 
Endofscript
